const multiplyVectors=(t,e)=>t.map((i,s)=>e[0].map((r,a)=>i.reduce((i,r,n)=>i+t[s][n]*e[n][a],0))),getBinaryStr=(t,e=0)=>(new Array(e).fill("0").join("")+(t>>>0).toString(2)).slice(-e),insertIntoStr=(t,e,i)=>`${e.slice(0,i)}${t}${e.slice(i)}`,getNList=t=>Object.keys(new Array(t).fill(!0)).map(t=>parseInt(t)),getRotationMatrix=(t,e,i)=>new Array(t).fill(new Array(t).fill(0)).map((t,s)=>t.map((t,r)=>r===i&&s===i?Math.cos(e):r===i+1&&s===i?-Math.sin(e):r===i&&s===i+1?Math.sin(e):r===i+1&&s===i+1?Math.cos(e):s===r?1:0)),getCombinations=(t,e,i=!1)=>0===t?[[]]:i?e.length===t?[e]:[...getCombinations(t-1,e.slice(1),!0).map(t=>[e[0],...t]),...getCombinations(t,e.slice(1),!0)]:new Array(t).fill(e).reduce((t,e)=>t.reduce((t,i)=>t.concat(e.map(t=>[].concat(i,t))),[])),generateBits=(t,e=["0","1"])=>0===t?[""]:1===t?e:getCombinations(t,e).map(t=>t.join("")).sort(),generateBitmap=(t,e)=>{const i={};return t.forEach(t=>i[t]=new Vertex(...t.split("").map(t=>e[parseInt(t)]))),i},generateMFaces=(t,e,i)=>{if(t>e)return[];const s=t,r=e-t,a=getCombinations(r,getNList(e),!0),n=[];for(let o=0;o<a.length;o++)for(let h=0;h<2**(e-t);h++){const e=getBinaryStr(h,r),c=[];for(let n=0;n<2**t;n++){let t=getBinaryStr(n,s);for(let i=0;i<r;i++)t=insertIntoStr(e[i],t,parseInt(a[o][i]));c.push(i[t])}n.push(c)}return n};class Vertex extends Array{project(t){return this.slice(0,t)}toMatrix(){if(1!==this[0].length)return this.map(t=>[t])}toVector(){if("number"==typeof this[0])return this.map(t=>t[0])}}class NCube{constructor(t=0,e=[-1,1],i={}){this.dimension=t,this.bits=generateBits(t),this.bitmap=generateBitmap(this.bits,e),this.backup=generateBitmap(this.bits,e),this.vertices=this.bits.map(t=>this.bitmap[t]),this.edges=generateMFaces(1,t,this.bitmap),this.faces=generateMFaces(2,t,this.bitmap),this.facets={1:this.edges,2:this.faces},Object.keys(i).forEach(t=>this[t]=i[t])}getFacets(t=0){return t<0?console.error("IllegalArgumentError: m must be a positive integer"):t%1!=0?console.error("IllegalArgumentError: m must be an integer"):this.facets[t]?this.facets[t]:(this.facets[t]=generateMFaces(t,this.dimension,this.bitmap),this.facets[t])}getFaces(t){return this.getFacets(t)}getMFaces(t){return this.getFacets(t)}reset(){return this.bits.forEach(t=>this.bitmap[t].forEach((e,i)=>this.bitmap[t][i]=this.backup[t][i])),this}scale(t){return this.bits.forEach(e=>this.bitmap[e].forEach((i,s)=>this.bitmap[e][s]*=t)),this}rotate(t,e=getNList(this.dimension)){return this.bits.forEach(i=>{const s=e.reduce((e,i)=>new Vertex(...multiplyVectors(getRotationMatrix(this.dimension,t,i),e.toMatrix()).flat()),this.bitmap[i]);this.bitmap[i].forEach((t,e)=>this.bitmap[i][e]=s[e])}),this}}